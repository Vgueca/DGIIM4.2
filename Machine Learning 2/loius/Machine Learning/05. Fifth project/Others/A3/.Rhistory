legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
most_discriminatives <- (train[,c(names(most_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(most_discriminatives[which(most_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(most_discriminatives[which(most_discriminatives["labels"]== "No tumor"),i]))
}
most_discriminatives
# gene X_33850: mean Glioblastoma=4.72  /  mean No tumor=4.21
# gene X_2829: mean Glioblastoma=2.44  /  mean No tumor=2.52
expression_level = c(1,-1)
names(expression_level) = c('X_33850', 'X_2829')
correct <- function(data, target, alpha, method) {
notumor_index <- unlist(which(data[target] == "No tumor"))
glioblastoma_index <- unlist(which(data[target] == "Glioblastoma"))
p_value <- c()
for (i in (1:(ncol(data)-1))){
t1 = data[notumor_index, i]
t2 = data[glioblastoma_index, i]
p_value = append(p_value, t.test(t1, t2, alternative="two.sided", var.equal=FALSE)$p.value)
names(p_value)[i] = colnames(data)[i]
}
p_value = p.adjust(p_value, method=method)
p_value = sort(p_value)
p_value = p_value[which(p_value <= alpha)]
p_value
}
bonf <- correct(train_filtered, "labels", 0.05, "bonferroni")
fdr <- correct(train_filtered, "labels", 0.05, "fdr")
#uncorrected <- correct(train_filtered, "labels", 0.05, "xxx")
#saveRDS(uncorrected, "uncorrected.rds")
saveRDS(bonf, "bonf.rds")
saveRDS(fdr, "fdr.rds")
train_filtered <- (train[c(names(filter_25), "labels")])
differential_selection <- function(data, target, alpha) {
notumor_index <- unlist(which(data[target] == "No tumor"))
glioblastoma_index <- unlist(which(data[target] == "Glioblastoma"))
selected <- c()
for (i in (1:(ncol(data)-1))){
t1 = data[notumor_index, i]
t2 = data[glioblastoma_index, i]
test = t.test(t1, t2, alternative="two.sided", var.equal=FALSE)$p.value
if (test <= alpha){
selected = append(selected, i)
}
}
length(selected)
}
J = differential_selection(train_filtered, "labels", 0.05)
correct <- function(data, target, alpha, method) {
notumor_index <- unlist(which(data[target] == "No tumor"))
glioblastoma_index <- unlist(which(data[target] == "Glioblastoma"))
p_value <- c()
for (i in (1:(ncol(data)-1))){
t1 = data[notumor_index, i]
t2 = data[glioblastoma_index, i]
p_value = append(p_value, t.test(t1, t2, alternative="two.sided", var.equal=FALSE)$p.value)
names(p_value)[i] = colnames(data)[i]
}
p_value = p.adjust(p_value, method=method)
p_value = sort(p_value)
p_value = p_value[which(p_value <= alpha)]
p_value
}
bonf <- correct(train_filtered, "labels", 0.05, "bonferroni")
fdr <- correct(train_filtered, "labels", 0.05, "fdr")
#uncorrected <- correct(train_filtered, "labels", 0.05, "xxx")
#saveRDS(uncorrected, "uncorrected.rds")
saveRDS(bonf, "bonf.rds")
saveRDS(fdr, "fdr.rds")
most_discriminative <- correct(train_filtered, "labels", 0.05, "fdr")
fdr
most_discriminative <- correct(train_filtered, "labels", 0.05, "fdr")[1:2]
most_discriminative
most_discriminative <- correct(train_filtered, "labels", 0.05, "fdr")[1:2]
most_discriminative_df <- (train[,c(names(most_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(most_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(most_discriminative_df[,i]))
stds <- append(stds, sd(most_discriminative_df[,i]))
}
for (i in (1:nrow(most_discriminative_df))) {
for (j in (1:(ncol(most_discriminative_df)-1))) {
most_discriminative_df[i,j] <- (most_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(most_discriminative_df))) {
if (most_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(most_discriminative_df[,1], most_discriminative_df[,2], type = 'p', xlab = colnames(most_discriminative_df)[1],
ylab = colnames(most_discriminative_df)[2], mar=c(1,1,1,1), col = colors, main = "2 most discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
most_discriminatives <- (train[,c(names(most_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(most_discriminatives[which(most_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(most_discriminatives[which(most_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_33850: mean Glioblastoma=4.72  /  mean No tumor=4.21
# gene X_2829: mean Glioblastoma=2.44  /  mean No tumor=2.52
expression_level = c(1,-1)
names(expression_level) = c('X_33850', 'X_2829')
saveRDS(expression_level, "expression_level.rds")
most_discriminatives
most_discriminative
names(expression_level) = c('X_27963', 'X_37364')
saveRDS(expression_level, "expression_level.rds")
# gene X_27963: mean Glioblastoma=8.69  /  mean No tumor=6.57
# gene X_37364: mean Glioblastoma=5.89  /  mean No tumor=7.82
expression_level = c(1,-1)
names(expression_level) = c('X_27963', 'X_37364')
# gene X_27963: mean Glioblastoma=8.69  /  mean No tumor=6.57
# gene X_37364: mean Glioblastoma=5.89  /  mean No tumor=7.82
expression_level = c(1,-1)
names(expression_level) = c('X_27963', 'X_37364')
saveRDS(expression_level, "expression_level.rds")
most_discriminative <- correct(train_filtered, "labels", 100, "fdr")[1:2]
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[1:2]
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[2499:2500]
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[2499:2500]
less_discriminative_df <- (train[,c(names(less_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(less_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(less_discriminative_df[,i]))
stds <- append(stds, sd(less_discriminative_df[,i]))
}
for (i in (1:nrow(less_discriminative_df))) {
for (j in (1:(ncol(less_discriminative_df)-1))) {
less_discriminative_df[i,j] <- (less_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(less_discriminative_df))) {
if (less_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(less_discriminative_df[,2], less_discriminative_df[,1], type = 'p', xlab = colnames(less_discriminative_df)[2],
ylab = colnames(less_discriminative_df)[1], mar=c(1,1,1,1), col = colors, main = "2 least discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
less_discriminatives <- (train[,c(names(less_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(less_discriminatives[which(less_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(less_discriminatives[which(less_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_27963: mean Glioblastoma=8.69  /  mean No tumor=6.57
# gene X_37364: mean Glioblastoma=5.89  /  mean No tumor=7.82
expression_level = c(1,-1)
names(expression_level) = c('X_27963', 'X_37364')
saveRDS(expression_level, "expression_level.rds")
less_discriminatives
less_discriminative
#comparing gene expression level
less_discriminatives <- (train[,c(names(less_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(less_discriminatives[which(less_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(less_discriminatives[which(less_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_46218: mean Glioblastoma=3.14  /  mean No tumor=3.14
# gene X_47612: mean Glioblastoma=3.48  /  mean No tumor=3.48
expression_level = c(0,0)
names(expression_level) = c('X_47612', 'X_46218')
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[2499:2500]
less_discriminative_df <- (train[,c(names(less_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(less_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(less_discriminative_df[,i]))
stds <- append(stds, sd(less_discriminative_df[,i]))
}
for (i in (1:nrow(less_discriminative_df))) {
for (j in (1:(ncol(less_discriminative_df)-1))) {
less_discriminative_df[i,j] <- (less_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(less_discriminative_df))) {
if (less_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(less_discriminative_df[,2], less_discriminative_df[,1], type = 'p', xlab = colnames(less_discriminative_df)[2],
ylab = colnames(less_discriminative_df)[1], mar=c(1,1,1,1), col = colors, main = "2 least discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
less_discriminatives <- (train[,c(names(less_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(less_discriminatives[which(less_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(less_discriminatives[which(less_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_46218: mean Glioblastoma=3.14  /  mean No tumor=3.14
# gene X_47612: mean Glioblastoma=3.48  /  mean No tumor=3.48
expression_level_less = c(0,0)
names(expression_level_less) = c('X_47612', 'X_46218')
saveRDS(expression_level_less, "expression_level.rds")
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[2499:2500]
less_discriminative_df <- (train[,c(names(less_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(less_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(less_discriminative_df[,i]))
stds <- append(stds, sd(less_discriminative_df[,i]))
}
for (i in (1:nrow(less_discriminative_df))) {
for (j in (1:(ncol(less_discriminative_df)-1))) {
less_discriminative_df[i,j] <- (less_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(less_discriminative_df))) {
if (less_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(less_discriminative_df[,2], less_discriminative_df[,1], type = 'p', xlab = colnames(less_discriminative_df)[2],
ylab = colnames(less_discriminative_df)[1], mar=c(1,1,1,1), col = colors, main = "2 least discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
less_discriminatives <- (train[,c(names(less_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(less_discriminatives[which(less_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(less_discriminatives[which(less_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_46218: mean Glioblastoma=3.14  /  mean No tumor=3.14
# gene X_47612: mean Glioblastoma=3.48  /  mean No tumor=3.48
expression_level_less = c(0,0)
names(expression_level_less) = c('X_47612', 'X_46218')
saveRDS(expression_level_less, "expression_level_less.rds")
most_discriminative <- correct(train_filtered, "labels", 0.05, "fdr")[1:2]
most_discriminative_df <- (train[,c(names(most_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(most_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(most_discriminative_df[,i]))
stds <- append(stds, sd(most_discriminative_df[,i]))
}
for (i in (1:nrow(most_discriminative_df))) {
for (j in (1:(ncol(most_discriminative_df)-1))) {
most_discriminative_df[i,j] <- (most_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(most_discriminative_df))) {
if (most_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(most_discriminative_df[,1], most_discriminative_df[,2], type = 'p', xlab = colnames(most_discriminative_df)[1],
ylab = colnames(most_discriminative_df)[2], mar=c(1,1,1,1), col = colors, main = "2 most discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
most_discriminatives <- (train[,c(names(most_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(most_discriminatives[which(most_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(most_discriminatives[which(most_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_27963: mean Glioblastoma=8.69  /  mean No tumor=6.57
# gene X_37364: mean Glioblastoma=5.89  /  mean No tumor=7.82
expression_level = c(1,-1)
names(expression_level) = c('X_27963', 'X_37364')
saveRDS(expression_level, "expression_level.rds")
windows()
plot(most_discriminative_df[,1], most_discriminative_df[,2], type = 'p', xlab = colnames(most_discriminative_df)[1],
ylab = colnames(most_discriminative_df)[2], mar=c(1,1,1,1), col = colors, main = "2 most discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
most_discriminative <- correct(train_filtered, "labels", 0.05, "fdr")[1:2]
most_discriminative_df <- (train[,c(names(most_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(most_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(most_discriminative_df[,i]))
stds <- append(stds, sd(most_discriminative_df[,i]))
}
for (i in (1:nrow(most_discriminative_df))) {
for (j in (1:(ncol(most_discriminative_df)-1))) {
most_discriminative_df[i,j] <- (most_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(most_discriminative_df))) {
if (most_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(most_discriminative_df[,1], most_discriminative_df[,2], type = 'p', xlab = colnames(most_discriminative_df)[1],
ylab = colnames(most_discriminative_df)[2], mar=c(1,1,1,1), col = colors, main = "2 most discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
most_discriminatives <- (train[,c(names(most_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(most_discriminatives[which(most_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(most_discriminatives[which(most_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_27963: mean Glioblastoma=8.69  /  mean No tumor=6.57
# gene X_37364: mean Glioblastoma=5.89  /  mean No tumor=7.82
expression_level = c(1,-1)
names(expression_level) = c('X_27963', 'X_37364')
saveRDS(expression_level, "expression_level.rds")
windows()
plot(most_discriminative_df[,1], most_discriminative_df[,2], type = 'p', xlab = colnames(most_discriminative_df)[1],
ylab = colnames(most_discriminative_df)[2], mar=c(1,1,1,1), col = colors, main = "2 most discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
less_discriminative <- correct(train_filtered, "labels", 100, "fdr")[2499:2500]
less_discriminative_df <- (train[,c(names(less_discriminative),"labels")])
#centering and normalizing data
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(less_discriminative_df)-1))) {
mean_vector <- append(mean_vector, mean(less_discriminative_df[,i]))
stds <- append(stds, sd(less_discriminative_df[,i]))
}
for (i in (1:nrow(less_discriminative_df))) {
for (j in (1:(ncol(less_discriminative_df)-1))) {
less_discriminative_df[i,j] <- (less_discriminative_df[i,j] - mean_vector[j]) / stds[j]
}
}
colors <- c()
for (i in (1:nrow(less_discriminative_df))) {
if (less_discriminative_df[i,3] == "No tumor") {
colors <- append(colors, "blue")
}
else{
colors <- append(colors, "red")
}
}
windows()
plot(less_discriminative_df[,2], less_discriminative_df[,1], type = 'p', xlab = colnames(less_discriminative_df)[2],
ylab = colnames(less_discriminative_df)[1], mar=c(1,1,1,1), col = colors, main = "2 least discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
dev.off()
#comparing gene expression level
less_discriminatives <- (train[,c(names(less_discriminative),"labels")])
mean_gliob <- c()
mean_notum <- c()
for (i in c(1,2)) {
mean_gliob <- append(mean_gliob, mean(less_discriminatives[which(less_discriminatives["labels"]== "Glioblastoma"),i]))
mean_notum <- append(mean_notum, mean(less_discriminatives[which(less_discriminatives["labels"]== "No tumor"),i]))
}
# gene X_46218: mean Glioblastoma=3.14  /  mean No tumor=3.14
# gene X_47612: mean Glioblastoma=3.48  /  mean No tumor=3.48
expression_level_less = c(0,0)
names(expression_level_less) = c('X_47612', 'X_46218')
saveRDS(expression_level_less, "expression_level_less.rds")
windows()
plot(less_discriminative_df[,2], less_discriminative_df[,1], type = 'p', xlab = colnames(less_discriminative_df)[2],
ylab = colnames(less_discriminative_df)[1], mar=c(1,1,1,1), col = colors, main = "2 least discriminative features")
legend("bottomright",
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "red"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
library('gplots')
analysis <- ns_filtering(df, 50/ncol(df)) #vai buscar as 50 colunas com maior variância
to_get_indexes <- train[c(names(analysis),"labels")]
#cria o vetor das cores que irá dizer se tem glioblastoma ou não
classification_labelled <- c()
for (i in (1:nrow(to_get_indexes))) {
if (to_get_indexes[i,"labels"] == "No tumor") {
classification_labelled <- append(classification_labelled, "blue")
}
else {
classification_labelled <- append(classification_labelled, "gray")
}
}
analysis_filtered <- train[c(names(analysis))]
#normalização
mean_vector <- c()
stds <- c()
for (i in (1:(ncol(analysis_filtered)))) {
mean_vector <- append(mean_vector,mean(analysis_filtered[,i]))
stds <- append(stds, sd(analysis_filtered[,i]))
}
matrix_analysis <- data.matrix(analysis_filtered)
for (i in (1:nrow(matrix_analysis))) {
for (j in (1:ncol(matrix_analysis))) {
matrix_analysis[i,j] <- (matrix_analysis[i,j] - mean_vector[j]) / stds[j]
}
}
#define um dégradé de cores, de vermelho a verde, com 500 cores intermédias
colors <- colorRampPalette(c("red","black","green"))(n = 500)
windows()
heatmap.2(matrix_analysis, main = "Variances of the 50 most \ndifferentially expressed features", xlab = "Probes",
ylab = "Patients", trace = "none", col = colors, margins = c(10,10), density.info = "none",
RowSideColors = classification_labelled)
legend("topright",      # location of the legend on the heatmap plot
legend = c("No tumor", "Glioblastoma"), # category labels
col = c("blue", "gray"),  # color key
lty= 1,             # line style
lwd = 5,            # line width
cex=0.55
)
